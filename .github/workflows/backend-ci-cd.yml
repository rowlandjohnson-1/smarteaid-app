# .github/workflows/backend-ci-cd.yml

name: Build and Deploy Backend API

on:
  push:
    branches:
      - main # Trigger dev1 on push to main
  tags:
    - 'v*.*.*' # Trigger prod on version tags (e.g., v1.0.0)
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev1, dev, stg, prod)'
        required: true
        type: choice
        options:
          - dev1
          - dev
          - stg
          - prod
      image_tag:
        description: 'Optional: Specific tag to build/deploy (overrides default)'
        required: false
      companyPrefix:
        description: 'Company prefix for resource names (e.g., sdt)'
        required: true
        default: 'sdt'
      purpose:
        description: 'Purpose of the resources (e.g., aidetector)'
        required: true
        default: 'aidetector'

permissions:
  id-token: write
  contents: read

jobs:
  determine_config:
    name: Determine Config (Env, Tag, ACR, Suffix)
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set_env.outputs.environment }}
      image_tag: ${{ steps.set_tag.outputs.image_tag }}
      acr_name: ${{ steps.set_acr.outputs.acr_name }}
      repo_name: backend-api # Hardcoded repo name
      companyPrefix: ${{ steps.set_inputs.outputs.companyPrefix }}
      purpose: ${{ steps.set_inputs.outputs.purpose }}
      deployment_suffix: ${{ steps.set_suffix.outputs.deployment_suffix }} # <-- NEW OUTPUT

    steps:
      - name: Set Workflow Inputs as Outputs
        id: set_inputs
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "companyPrefix=${{ github.event.inputs.companyPrefix }}" >> $GITHUB_OUTPUT
            echo "purpose=${{ github.event.inputs.purpose }}" >> $GITHUB_OUTPUT
          else
            echo "companyPrefix=sdt" >> $GITHUB_OUTPUT # Default for non-dispatch
            echo "purpose=aidetector" >> $GITHUB_OUTPUT # Default for non-dispatch
          fi

      - name: Set Environment based on Trigger
        id: set_env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=dev1" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          else
            echo "Unsupported trigger ref: ${{ github.ref }}. Defaulting to dev1 for this push/trigger."
            echo "environment=dev1" >> $GITHUB_OUTPUT
          fi

      - name: Set Image Tag
        id: set_tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.image_tag }}" != "" ]]; then
            echo "image_tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
            TAG_NAME=$(echo "${{ github.ref }}" | sed 's#refs/tags/##')
            echo "image_tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
            echo "image_tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi

      - name: Set ACR Name
        id: set_acr
        run: |
          COMPANY_PREFIX_LOWER=$(echo "${{ steps.set_inputs.outputs.companyPrefix }}" | tr '[:upper:]' '[:lower:]')
          PURPOSE_LOWER=$(echo "${{ steps.set_inputs.outputs.purpose }}" | tr '[:upper:]' '[:lower:]')
          ENVIRONMENT_LOWER=$(echo "${{ steps.set_env.outputs.environment }}" | tr '[:upper:]' '[:lower:]')
          ACR_NAME="acr${COMPANY_PREFIX_LOWER}${PURPOSE_LOWER}${ENVIRONMENT_LOWER}"
          echo "ACR Name for environment ${{ steps.set_env.outputs.environment }}: ${ACR_NAME}"
          echo "acr_name=${ACR_NAME}" >> $GITHUB_OUTPUT
      
      - name: Set Deployment Suffix # <-- NEW STEP
        id: set_suffix
        run: |
          # Generates a unique suffix: timestamp-runid-runattempt
          SUFFIX_VALUE="$(date +%Y%m%d%H%M%S)-${{ github.run_id }}-${{ github.run_attempt }}"
          echo "Generated Deployment Suffix: ${SUFFIX_VALUE}"
          echo "deployment_suffix=${SUFFIX_VALUE}" >> $GITHUB_OUTPUT

  deploy_foundational_infra:
    name: Deploy Foundational Infra (inc. ACR)
    needs: determine_config
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_config.outputs.environment }}
    steps:
      - name: Checkout Code # Checkout is needed if the called workflow is in the same repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Ensure it checks out the correct ref

      - name: Trigger Infrastructure Deployment (creates ACR)
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: azure-infra-deploy.yml
          ref: ${{ github.ref }} # Use the same ref for the called workflow
          inputs: >
            {
              "environment": "${{ needs.determine_config.outputs.environment }}",
              "image_tag": "placeholder-for-infra-deploy",
              "companyPrefix": "${{ needs.determine_config.outputs.companyPrefix }}",
              "purpose": "${{ needs.determine_config.outputs.purpose }}",
              "deploymentSuffix": "${{ needs.determine_config.outputs.deployment_suffix }}"
            }
          token: ${{ secrets.PAT_TOKEN }} # PAT token with repo and workflow write scopes

  build_and_push:
    name: Build and Push Docker Image
    needs: [determine_config, deploy_foundational_infra]
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_config.outputs.environment }}
    outputs:
      image_name_with_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ needs.determine_config.outputs.acr_name }}.azurecr.io/${{ needs.determine_config.outputs.repo_name }}
          tags: |
            ${{ needs.determine_config.outputs.image_tag }}
            type=raw,value=latest,enable=${{ needs.determine_config.outputs.environment == 'dev' || needs.determine_config.outputs.environment == 'stg' || needs.determine_config.outputs.environment == 'dev1' }}

      - name: Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.determine_config.outputs.acr_name }}.azurecr.io
          # Ensure AZURE_CLIENT_ID and AZURE_CLIENT_SECRET are available in this environment's secrets
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy_container_app_update:
    name: Deploy/Update Container App
    needs: [determine_config, build_and_push] # Depends on successful build and push
    runs-on: ubuntu-latest
    environment: ${{ needs.determine_config.outputs.environment }}

    steps:
      - name: Checkout Code # Checkout is needed if the called workflow is in the same repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }} # Ensure it checks out the correct ref

      - name: Trigger Infrastructure Deployment (updates/creates Container App)
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: azure-infra-deploy.yml
          ref: ${{ github.ref }} # Use the same ref for the called workflow
          inputs: >
            {
              "environment": "${{ needs.determine_config.outputs.environment }}",
              "image_tag": "${{ needs.determine_config.outputs.image_tag }}",
              "companyPrefix": "${{ needs.determine_config.outputs.companyPrefix }}",
              "purpose": "${{ needs.determine_config.outputs.purpose }}",
              "deploymentSuffix": "${{ needs.determine_config.outputs.deployment_suffix }}"
            }
          token: ${{ secrets.PAT_TOKEN }} # PAT token with repo and workflow write scopes
#