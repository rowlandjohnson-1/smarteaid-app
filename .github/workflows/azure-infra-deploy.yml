# .github/workflows/azure-infra-deploy.yml

name: Deploy Azure Infrastructure

# Allow manual triggering from the GitHub Actions UI ONLY
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, stg, prod)'
        required: true
        type: choice
        options:
          - dev
          - stg      # Use 'staging' if you named your environment/param file 'staging'
          - prod
      image_tag:
        description: 'Docker image tag to configure (e.g., latest, commit SHA)'
        required: true
        default: 'latest' # Default value, adjust as needed

# Permissions needed by the runner
permissions:
  id-token: write # May be needed by azure/login internally
  contents: read  # To checkout the code

jobs:
  deploy_infrastructure:
    name: Deploy Infra to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    # Link the job to the GitHub Environment matching the input
    # This makes environment-specific secrets available
    environment: ${{ github.event.inputs.environment }}

    steps:
    # 1. Checkout repository code so the workflow can access Bicep files
    - name: Checkout Code
      uses: actions/checkout@v4

    # 2. Log in to Azure using the Service Principal secrets stored in GitHub Environments
    #    Using the inline JSON construction method from your original file.
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        enable-AzPSSession: false # Keep false unless needed

    # 3. (Optional but kept from your file) Install/Verify Bicep CLI
    #    Note: azure/cli@v1 usually includes Bicep, this might be redundant.
    - name: Install/Verify Bicep CLI
      run: |
        echo "Attempting to ensure Bicep CLI is available..."
        az bicep install
        az bicep version
      continue-on-error: true # Allow to continue even if Bicep is already managed by az cli

    # 4. Construct Container Image Name (Adjust ACR name/repo path if needed)
    - name: Set Image Name variable
      id: image_name
      run: |
        # --- !!! IMPORTANT: ADJUST THESE VALUES !!! ---
        ACR_NAME="acrsdtaidetector${{ github.event.inputs.environment }}" # Example ACR name convention
        REPO_NAME="backend-api" # Example repo name in ACR
        # --- !!! END OF ADJUSTABLE VALUES !!! ---

        TAG="${{ github.event.inputs.image_tag }}"
        FULL_IMAGE_NAME="${ACR_NAME}.azurecr.io/${REPO_NAME}:${TAG}"
        echo "Constructed image name: ${FULL_IMAGE_NAME}"
        echo "imageName=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

    # 5. Deploy Bicep template at Subscription scope
    - name: Deploy Bicep File
      uses: azure/CLI@v1
      with:
        azcliversion: 2.34.1 # Specify a version if needed
        inlineScript: |
          # --- START REPLACEMENT SCRIPT (Content from github_workflow_update_02) ---
          echo "Starting Bicep deployment..."
          # Construct parameters string
          # Note: Secrets should be securely passed from GitHub Secrets
          parameters=" \
            environment=${{ env.ENVIRONMENT_NAME }} \
            containerImage=${{ env.CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.CONTAINER_IMAGE_NAME }}:${{ needs.build_and_push.outputs.image_tag }} \
            cosmosDbConnectionString='${{ secrets.COSMOS_DB_CONNECTION_STRING }}' \
            kindeClientSecret='${{ secrets.KINDE_CLIENT_SECRET }}' \
            stripeSecretKey='${{ secrets.STRIPE_SECRET_KEY }}' \
            storageConnectionString='${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}' \
          "
          # Add optional params only if they have values (adjust logic if needed)
          if [[ -n "${{ env.CONTAINER_APP_CPU_CORE_COUNT }}" ]]; then
            parameters="$parameters containerAppCpuCoreCount=${{ env.CONTAINER_APP_CPU_CORE_COUNT }}"
          fi
          if [[ -n "${{ env.CONTAINER_APP_MEMORY_GIB }}" ]]; then
            parameters="$parameters containerAppMemoryGiB=${{ env.CONTAINER_APP_MEMORY_GIB }}"
          fi
          if [[ -n "${{ env.CONTAINER_APP_MIN_REPLICAS }}" ]]; then
            parameters="$parameters containerAppMinReplicas=${{ env.CONTAINER_APP_MIN_REPLICAS }}"
          fi
          if [[ -n "${{ env.CONTAINER_APP_MAX_REPLICAS }}" ]]; then
            parameters="$parameters containerAppMaxReplicas=${{ env.CONTAINER_APP_MAX_REPLICAS }}"
          fi

          echo "Using parameters: $parameters"

          az deployment sub create \
            --name "${{ env.AZURE_RESOURCE_PREFIX }}-${{ env.ENVIRONMENT_NAME }}-${{ github.run_number }}" \
            --location ${{ env.AZURE_LOCATION }} \
            --template-file infra/main.bicep \
            --parameters $parameters

          echo "Bicep deployment finished."
          # --- END REPLACEMENT SCRIPT ---

    # 6. Azure Logout (Good practice)
    - name: Azure Logout
      run: az logout
      if: always() # Run even if previous steps fail
