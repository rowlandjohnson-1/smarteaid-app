name: Deploy Azure Infrastructure

# Allow manual triggering from the GitHub Actions UI ONLY
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev1, dev, stg, prod)'
        required: true
        type: choice
        options: # <-- Ensure this list matches your desired environment names
          - dev1
          - dev
          - stg # <-- Use 'stg' consistently now
          - prod
      image_tag:
        description: 'Docker image tag to configure (e.g., latest, commit SHA)'
        required: true
        default: 'latest' # Default value, adjust as needed

# Permissions needed by the runner
permissions:
  id-token: write # May be needed by azure/login internally
  contents: read  # To checkout the code

jobs:
  deploy_infrastructure:
    name: Deploy Infra to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    # Link the job to the GitHub Environment matching the input
    # This makes environment-specific secrets available
    environment: ${{ github.event.inputs.environment }} # This now correctly links to 'stg' when selected

    steps:
    # 1. Checkout repository code so the workflow can access Bicep files
    - name: Checkout Code
      uses: actions/checkout@v4

    # 2. Log in to Azure using the single 'creds' JSON input
    #    Ensure the secrets referenced here are for the CORRECT SP (5c69...)
    #    in the target GitHub Environment (e.g., stg)
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}' 
        enable-AzPSSession: false

    # 3. (Optional) Install/Verify Bicep CLI
    - name: Install/Verify Bicep CLI
      run: |
        echo "Attempting to ensure Bicep CLI is available..."
        az bicep install
        az bicep version
      continue-on-error: true # Allow to continue even if Bicep is already managed by az cli

    # 4. Construct Container Image Name (Adjust ACR name/repo path if needed) - Includes Debugging
    - name: Set Image Name variable
      id: image_name
      run: |
        echo "--- Debugging Image Name Construction ---"
        echo "Input Environment: ${{ github.event.inputs.environment }}"
        echo "Input Image Tag: ${{ github.event.inputs.image_tag }}"

        # --- !!! IMPORTANT: ADJUST THESE VALUES IF NEEDED !!! ---
        # This now correctly uses 'stg' when passed from the input
        ACR_NAME="acrsdtaidetector${{ github.event.inputs.environment }}"
        REPO_NAME="backend-api" # Example repo name in ACR
        # --- !!! END OF ADJUSTABLE VALUES !!! ---
        echo "Using ACR Name: ${ACR_NAME}"
        echo "Using Repo Name: ${REPO_NAME}"

        TAG="${{ github.event.inputs.image_tag }}"
        echo "Using Tag: ${TAG}"

        FULL_IMAGE_NAME="${ACR_NAME}.azurecr.io/${REPO_NAME}:${TAG}"
        echo "Constructed image name: ${FULL_IMAGE_NAME}"
        echo "--- End Debugging ---"

        # Set the output variable
        echo "imageName=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

    # 5. Deploy Bicep template at Subscription scope - Uses correct secrets via environment link
    - name: Deploy Bicep File
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Starting Bicep deployment for environment: ${{ github.event.inputs.environment }}"
          echo "Using container image: ${{ steps.image_name.outputs.imageName }}"

          # Define deployment location
          DEPLOYMENT_LOCATION="uksouth" # Or your preferred Azure region

          # Run the deployment command with dynamic parameters ONLY via --parameters key=value
          az deployment sub create \
            --name "infra-deploy-${{ github.event.inputs.environment }}-${{ github.run_id }}" \
            --location ${DEPLOYMENT_LOCATION} \
            --template-file ./infra/main.bicep \
            --parameters environment=${{ github.event.inputs.environment }} \
            --parameters containerImage='${{ steps.image_name.outputs.imageName }}' \
            --parameters cosmosDbConnectionString='${{ secrets.COSMOS_DB_CONNECTION_STRING }}' \
            --parameters kindeClientSecret='${{ secrets.KINDE_CLIENT_SECRET }}' \
            --parameters stripeSecretKey='${{ secrets.STRIPE_SECRET_KEY }}' \
            --parameters storageConnectionString='${{ secrets.STORAGE_CONNECTION_STRING }}' \
            --debug
            # Add any other parameters defined in main.bicep here if they aren't handled by defaults/conditionals
            # e.g. --parameters companyPrefix='sdt' purpose='aidetector' location='uksouth' (if not using defaults)

          echo "Bicep deployment attempt for ${{ github.event.inputs.environment }} finished."

    # 6. Verify Azure Login Identity (Keep this for debugging)
    - name: Verify Azure Login Identity
      run: |
        echo "Checking logged in Azure CLI identity..."
        az account show --query user --output table
        echo "Checking logged in Service Principal (if applicable)..."
        az ad signed-in-user show --query id --output tsv || echo "Not logged in as a user"
        # This uses the secret from the environment the job is linked to
        az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query appDisplayName --output tsv || echo "SP info check failed for secrets.AZURE_CLIENT_ID"
      shell: bash

    # 7. Azure Logout (Good practice)
    - name: Azure Logout
      run: az logout
      if: always() # Run even if previous steps fail
