# .github/workflows/azure-infra-deploy.yml

name: Deploy Azure Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, dev1, staging, prod)'
        required: true
        type: choice
        options:
          - dev
          - dev1
          - staging
          - prod
      image_tag:
        description: 'Docker image tag to configure (e.g., latest, commit SHA, or placeholder-for-infra-deploy)'
        required: true
        default: 'latest'
      companyPrefix:
        description: 'Company prefix for resource names (e.g., sdt)'
        required: true
        default: 'sdt'
      purpose:
        description: 'Purpose of the resources (e.g., aidetector)'
        required: true
        default: 'aidetector'
      deploymentSuffix: # <-- NEW INPUT
        description: 'A unique suffix for the Bicep module deployment name (e.g., from pipeline run ID or timestamp)'
        required: true # Make this required as main.bicep needs it

permissions:
  id-token: write
  contents: read

jobs:
  deploy_infrastructure:
    name: Deploy Infra to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        enable-AzPSSession: false

    - name: Install/Verify Bicep CLI
      run: |
        echo "Attempting to ensure Bicep CLI is available..."
        az bicep install
        az bicep version
      continue-on-error: true

    - name: Set Image Name variable
      id: image_name
      run: |
        ACR_NAME_LOWER=$(echo "acr${{ github.event.inputs.companyPrefix }}${{ github.event.inputs.purpose }}${{ github.event.inputs.environment }}" | tr '[:upper:]' '[:lower:]')
        REPO_NAME="backend-api" # Ensure this is your correct repository name in ACR
        TAG="${{ github.event.inputs.image_tag }}"
        
        FULL_IMAGE_NAME="${ACR_NAME_LOWER}.azurecr.io/${REPO_NAME}:${TAG}"
        echo "Constructed image name: ${FULL_IMAGE_NAME}"
        echo "imageName=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
      shell: bash

    - name: Deploy Bicep File
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Starting Bicep deployment for environment: ${{ github.event.inputs.environment }}"
          echo "Using container image: ${{ steps.image_name.outputs.imageName }}"
          echo "Using deployment suffix: ${{ github.event.inputs.deploymentSuffix }}"

          DEPLOYMENT_LOCATION="uksouth" 

          az deployment sub create \
            --name "infra-deploy-${{ github.event.inputs.environment }}-${{ github.run_id }}-${{ github.run_attempt }}" \
            --location ${DEPLOYMENT_LOCATION} \
            --template-file ./infra/main.bicep \
            --parameters environment=${{ github.event.inputs.environment }} \
            --parameters companyPrefix='${{ github.event.inputs.companyPrefix }}' \
            --parameters purpose='${{ github.event.inputs.purpose }}' \
            --parameters containerImage='${{ steps.image_name.outputs.imageName }}' \
            --parameters mongoDbUrl='${{ secrets.MONGODB_URL }}' \
            --parameters kindeDomain='${{ secrets.KINDE_DOMAIN }}' \
            --parameters kindeAudience='${{ secrets.KINDE_AUDIENCE }}' \
            --parameters kindeClientSecret='${{ secrets.KINDE_CLIENT_SECRET }}' \
            --parameters stripeSecretKey='${{ secrets.STRIPE_SECRET_KEY }}' \
            --parameters storageConnectionString='${{ secrets.STORAGE_CONNECTION_STRING }}' \
            --parameters deploymentSuffix='${{ github.event.inputs.deploymentSuffix }}' \
            --debug

          echo "Bicep deployment attempt for ${{ github.event.inputs.environment }} finished."

    - name: Verify Azure Login Identity
      run: |
        echo "Checking logged in Azure CLI identity..."
        az account show --query user --output table
        echo "Checking logged in Service Principal (if applicable)..."
        az ad signed-in-user show --query id --output tsv || echo "Not logged in as a user"
        # Ensure AZURE_CLIENT_ID secret is available if this check is important
        # az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query appDisplayName --output tsv || echo "SP info check failed for secrets.AZURE_CLIENT_ID"
      shell: bash
      if: always()

    - name: Azure Logout
      run: az logout
      if: always()
