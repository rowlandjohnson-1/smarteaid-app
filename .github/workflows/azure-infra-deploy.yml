# .github/workflows/azure-infra-deploy.yml

name: Deploy Azure Infrastructure

# Allow manual triggering from the GitHub Actions UI ONLY
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment (dev, stg, prod)'
        required: true
        type: choice
        options:
          - dev
          - stg      # Use 'staging' if you named your environment/param file 'staging'
          - prod
      image_tag:
        description: 'Docker image tag to configure (e.g., latest, commit SHA)'
        required: true
        default: 'latest' # Default value, adjust as needed

# Permissions needed by the runner
permissions:
  id-token: write # May be needed by azure/login internally
  contents: read  # To checkout the code

jobs:
  deploy_infrastructure:
    name: Deploy Infra to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    # Link the job to the GitHub Environment matching the input
    # This makes environment-specific secrets available
    environment: ${{ github.event.inputs.environment }}

    steps:
    # 1. Checkout repository code so the workflow can access Bicep files
    - name: Checkout Code
      uses: actions/checkout@v4

    # 2. Log in to Azure using the Service Principal secrets stored in GitHub Environments
    #    Using the inline JSON construction method from your original file.
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
        enable-AzPSSession: false # Keep false unless needed

    # 3. (Optional but kept from your file) Install/Verify Bicep CLI
    #    Note: azure/cli@v1 usually includes Bicep, this might be redundant.
    - name: Install/Verify Bicep CLI
      run: |
        echo "Attempting to ensure Bicep CLI is available..."
        az bicep install
        az bicep version
      continue-on-error: true # Allow to continue even if Bicep is already managed by az cli

    # 4. Construct Container Image Name (Adjust ACR name/repo path if needed)
    - name: Set Image Name variable
      id: image_name
      run: |
        # --- !!! IMPORTANT: ADJUST THESE VALUES !!! ---
        ACR_NAME="acrsdtaidetector${{ github.event.inputs.environment }}" # Example ACR name convention
        REPO_NAME="backend-api" # Example repo name in ACR
        # --- !!! END OF ADJUSTABLE VALUES !!! ---

        TAG="${{ github.event.inputs.image_tag }}"
        FULL_IMAGE_NAME="${ACR_NAME}.azurecr.io/${REPO_NAME}:${TAG}"
        echo "Constructed image name: ${FULL_IMAGE_NAME}"
        echo "imageName=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT

    # 5. Deploy Bicep template at Subscription scope
    - name: Deploy Bicep File
      uses: azure/cli@v1
      with:
        inlineScript: |
          echo "Starting Bicep deployment for environment: ${{ github.event.inputs.environment }}"
          echo "Using parameter file: ./infra/params/${{ github.event.inputs.environment }}.bicepparam"
          echo "Using container image: ${{ steps.image_name.outputs.imageName }}"

          # Define deployment location
          DEPLOYMENT_LOCATION="uksouth" # Or your preferred Azure region

          # Run the deployment command with dynamic parameters
          az deployment sub create \
            --name "infra-deploy-${{ github.event.inputs.environment }}-${{ github.run_id }}" \
            --location ${DEPLOYMENT_LOCATION} \
            --template-file ./infra/main.bicep \
            --parameters ./infra/params/${{ github.event.inputs.environment }}.bicepparam \
            --parameters containerImage=${{ steps.image_name.outputs.imageName }} \
            --parameters cosmosDbConnectionString=${{ secrets.COSMOS_DB_CONNECTION_STRING }} \
            --parameters kindeClientSecret=${{ secrets.KINDE_CLIENT_SECRET }} \
            --parameters stripeSecretKey=${{ secrets.STRIPE_SECRET_KEY }} \
            --parameters storageConnectionString=${{ secrets.STORAGE_CONNECTION_STRING }}

          echo "Bicep deployment attempt for ${{ github.event.inputs.environment }} finished."

    # 6. Azure Logout (Good practice)
    - name: Azure Logout
      run: az logout
      if: always() # Run even if previous steps fail
